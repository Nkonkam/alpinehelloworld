pipeline {
  environment {
    // Define environment variables here
    IMAGE_NAME =   'alpinehelloworld'
    IMAGE_TAG =    'latest'
    STAGING = 'heroku-staging'
    PRODUCTION = 'heroku-production'
  }

  agent none 

  stages {


    stage('Build image') {
      agent any
      steps {
        script {
          sh "docker build -t wouli159/${IMAGE_NAME}:${IMAGE_TAG} . "
        }
      }
    }

    stage('Run container based on built image') {
      agent any
      steps {
        script {
          sh '''
          docker run -d --name ${IMAGE_NAME} -p 8080:5000 -e PORT=5000 wouli159/${IMAGE_NAME}:${IMAGE_TAG}
          sleep 5
           '''
        }
      }
    }

    stage('Test container') {
      agent any
      steps {
        script {
          sh '''
         curl http://localhost:8080 | grep "Hello World"
          '''
        }
      }
    }

    stage('Clean container') {
      agent any
      steps {
        script {
          sh '''
        docker stop ${IMAGE_NAME}
        docker rm ${IMAGE_NAME}
          '''
        }
      }
    }

    stage('Push image in staging and deploy it') {
      when {
        expression {
          BRANCH_NAME == 'origin/master'
        }
      }
      agent any
      environment {
        HEROKU_API_KEY = credentials('heroku_api_key')
      }
      steps {
        script {
          sh '''
        heroku container:login
        heroku create ${STAGING}  || echo "project already exists"
        heroku container:push web -a ${STAGING}
        heroku container:release web -a ${STAGING}
          '''
        }
      }
    }

    stage('Push image in production and deploy it') { // Moved inside the stages block
      when {
        expression {
          BRANCH_NAME == 'origin/master'
        }
      }
      agent any
      environment {
        HEROKU_API_KEY = credentials('heroku_api_key')
      }
      steps {
        script {
          sh '''
        heroku container:login
        heroku create ${PRODUCTION}  || echo "project already exists"
        heroku container:push web -a ${PRODUCTION}
        heroku container:release web -a ${PRODUCTION}
          '''
        }
      }
    }
  }
}
